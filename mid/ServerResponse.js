ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
        _maxListeners: undefined,
            outputData: [],
                outputSize: 0,
                    writable: true,
                        destroyed: false,
                            _last: false,
                                chunkedEncoding: false,
                                    shouldKeepAlive: true,
                                        useChunkedEncodingByDefault: true,
                                            sendDate: true,
                                                _removedConnection: false,
                                                    _removedContLen: false,
                                                        _removedTE: false,
                                                            _contentLength: null,
                                                                _hasBody: true,
                                                                    _trailer: '',
                                                                        finished: false,
                                                                            _headerSent: false,
                                                                                socket: <ref * 1 > Socket {
        connecting: false,
            _hadError: false,
                _parent: null,
                    _host: null,
                        _readableState: ReadableState {
            objectMode: false,
                highWaterMark: 16384,
                    buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
                pipes: [],
                    flowing: true,
                        ended: false,
                            endEmitted: false,
                                reading: true,
                                    sync: false,
                                        needReadable: true,
                                            emittedReadable: false,
                                                readableListening: false,
                                                    resumeScheduled: false,
                                                        errorEmitted: false,
                                                            emitClose: false,
                                                                autoDestroy: false,
                                                                    destroyed: false,
                                                                        errored: false,
                                                                            closed: false,
                                                                                closeEmitted: false,
                                                                                    defaultEncoding: 'utf8',
                                                                                        awaitDrainWriters: null,
                                                                                            multiAwaitDrain: false,
                                                                                                readingMore: false,
                                                                                                    decoder: null,
                                                                                                        encoding: null,
                                                                                                            [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
            end: [Array],
                timeout: [Function: socketOnTimeout],
                    data: [Function: bound socketOnData],
                        error: [Function: socketOnError],
                            close: [Array],
                                drain: [Function: bound socketOnDrain],
                                    resume: [Function: onSocketResume],
                                        pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
            _maxListeners: undefined,
                _writableState: WritableState {
            objectMode: false,
                highWaterMark: 16384,
                    finalCalled: false,
                        needDrain: false,
                            ending: false,
                                ended: false,
                                    finished: false,
                                        destroyed: false,
                                            decodeStrings: false,
                                                defaultEncoding: 'utf8',
                                                    length: 0,
                                                        writing: false,
                                                            corked: 0,
                                                                sync: true,
                                                                    bufferProcessing: false,
                                                                        onwrite: [Function: bound onwrite],
                                                                            writecb: null,
                                                                                writelen: 0,
                                                                                    afterWriteTickInfo: null,
                                                                                        buffered: [],
                                                                                            bufferedIndex: 0,
                                                                                                allBuffers: true,
                                                                                                    allNoop: true,
                                                                                                        pendingcb: 0,
                                                                                                            prefinished: false,
                                                                                                                errorEmitted: false,
                                                                                                                    emitClose: false,
                                                                                                                        autoDestroy: false,
                                                                                                                            errored: false,
                                                                                                                                closed: false
        },
        allowHalfOpen: true,
            _sockname: null,
                _pendingData: null,
                    _pendingEncoding: '',
                        server: Server {
            maxHeaderSize: undefined,
                insecureHTTPParser: undefined,
                    _events: [Object: null prototype],
                        _eventsCount: 2,
                            _maxListeners: undefined,
                                _connections: 1,
                                    _handle: [TCP],
                                        _usingWorkers: false,
                                            _workers: [],
                                                _unref: false,
                                                    allowHalfOpen: true,
                                                        pauseOnConnect: false,
                                                            httpAllowHalfOpen: false,
                                                                timeout: 0,
                                                                    keepAliveTimeout: 5000,
                                                                        maxHeadersCount: null,
                                                                            headersTimeout: 60000,
                                                                                _connectionKey: '6::::5000',
                                                                                    [Symbol(IncomingMessage)]: [Function: IncomingMessage],
                                                                                        [Symbol(ServerResponse)]: [Function: ServerResponse],
                                                                                            [Symbol(kCapture)]: false,
                                                                                                [Symbol(async_id_symbol)]: 5
        },
        _server: Server {
            maxHeaderSize: undefined,
                insecureHTTPParser: undefined,
                    _events: [Object: null prototype],
                        _eventsCount: 2,
                            _maxListeners: undefined,
                                _connections: 1,
                                    _handle: [TCP],
                                        _usingWorkers: false,
                                            _workers: [],
                                                _unref: false,
                                                    allowHalfOpen: true,
                                                        pauseOnConnect: false,
                                                            httpAllowHalfOpen: false,
                                                                timeout: 0,
                                                                    keepAliveTimeout: 5000,
                                                                        maxHeadersCount: null,
                                                                            headersTimeout: 60000,
                                                                                _connectionKey: '6::::5000',
                                                                                    [Symbol(IncomingMessage)]: [Function: IncomingMessage],
                                                                                        [Symbol(ServerResponse)]: [Function: ServerResponse],
                                                                                            [Symbol(kCapture)]: false,
                                                                                                [Symbol(async_id_symbol)]: 5
        },
        parser: HTTPParser {
            '0': [Function: parserOnHeaders],
                '1': [Function: parserOnHeadersComplete],
                    '2': [Function: parserOnBody],
                        '3': [Function: parserOnMessageComplete],
                            '4': [Function: bound onParserExecute],
                                '5': [Function: bound onParserTimeout],
                                    _headers: [],
                                        _url: '',
                                            socket: [Circular * 1],
                                                incoming: [IncomingMessage],
                                                    outgoing: null,
                                                        maxHeaderPairs: 2000,
                                                            _consumed: true,
                                                                onIncoming: [Function: bound parserOnIncoming],
                                                                    [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
        },
        on: [Function: socketListenerWrap],
            addListener: [Function: socketListenerWrap],
                prependListener: [Function: socketListenerWrap],
                    _paused: false,
                        _httpMessage: [Circular * 2],
                            [Symbol(async_id_symbol)]: 9,
                                [Symbol(kHandle)]: TCP {
            reading: true,
                onconnection: null,
                    _consumed: true,
                        [Symbol(owner_symbol)]: [Circular * 1]
        },
        [Symbol(kSetNoDelay)]: false,
            [Symbol(lastWriteQueueSize)]: 0,
                [Symbol(timeout)]: null,
                    [Symbol(kBuffer)]: null,
                        [Symbol(kBufferCb)]: null,
                            [Symbol(kBufferGen)]: null,
                                [Symbol(kCapture)]: false,
                                    [Symbol(kBytesRead)]: 0,
                                        [Symbol(kBytesWritten)]: 0
    },
    _header: null,
        _keepAliveTimeout: 5000,
            _onPendingData: [Function: bound updateOutgoingData],
                _sent100: false,
                    _expect_continue: false,
                        req: IncomingMessage {
        _readableState: ReadableState {
            objectMode: false,
                highWaterMark: 16384,
                    buffer: BufferList { head: null, tail: null, length: 0 },
            length: 0,
                pipes: [],
                    flowing: null,
                        ended: true,
                            endEmitted: false,
                                reading: false,
                                    sync: true,
                                        needReadable: false,
                                            emittedReadable: false,
                                                readableListening: false,
                                                    resumeScheduled: false,
                                                        errorEmitted: false,
                                                            emitClose: true,
                                                                autoDestroy: false,
                                                                    destroyed: false,
                                                                        errored: false,
                                                                            closed: false,
                                                                                closeEmitted: false,
                                                                                    defaultEncoding: 'utf8',
                                                                                        awaitDrainWriters: null,
                                                                                            multiAwaitDrain: false,
                                                                                                readingMore: true,
                                                                                                    decoder: null,
                                                                                                        encoding: null,
                                                                                                            [Symbol(kPaused)]: null
        },
        _events: [Object: null prototype] { },
        _eventsCount: 0,
            _maxListeners: undefined,
                socket: <ref * 1 > Socket {
            connecting: false,
                _hadError: false,
                    _parent: null,
                        _host: null,
                            _readableState: [ReadableState],
                                _events: [Object: null prototype],
                                    _eventsCount: 8,
                                        _maxListeners: undefined,
                                            _writableState: [WritableState],
                                                allowHalfOpen: true,
                                                    _sockname: null,
                                                        _pendingData: null,
                                                            _pendingEncoding: '',
                                                                server: [Server],
                                                                    _server: [Server],
                                                                        parser: [HTTPParser],
                                                                            on: [Function: socketListenerWrap],
                                                                                addListener: [Function: socketListenerWrap],
                                                                                    prependListener: [Function: socketListenerWrap],
                                                                                        _paused: false,
                                                                                            _httpMessage: [Circular * 2],
                                                                                                [Symbol(async_id_symbol)]: 9,
                                                                                                    [Symbol(kHandle)]: [TCP],
                                                                                                        [Symbol(kSetNoDelay)]: false,
                                                                                                            [Symbol(lastWriteQueueSize)]: 0,
                                                                                                                [Symbol(timeout)]: null,
                                                                                                                    [Symbol(kBuffer)]: null,
                                                                                                                        [Symbol(kBufferCb)]: null,
                                                                                                                            [Symbol(kBufferGen)]: null,
                                                                                                                                [Symbol(kCapture)]: false,
                                                                                                                                    [Symbol(kBytesRead)]: 0,
                                                                                                                                        [Symbol(kBytesWritten)]: 0
        },
        httpVersionMajor: 1,
            httpVersionMinor: 1,
                httpVersion: '1.1',
                    complete: true,
                        headers: {
            host: 'localhost:5000',
                connection: 'keep-alive',
                    'sec-ch-ua': '"Chromium";v="92", " Not A;Brand";v="99", "Google Chrome";v="92"',
                        'sec-ch-ua-mobile': '?0',
                            'upgrade-insecure-requests': '1',
                                'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36',
                                    accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
                                        'sec-fetch-site': 'same-origin',
                                            'sec-fetch-mode': 'navigate',
                                                'sec-fetch-user': '?1',
                                                    'sec-fetch-dest': 'document',
                                                        referer: 'http://localhost:5000/rotahome',
                                                            'accept-encoding': 'gzip, deflate, br',
                                                                'accept-language': 'pt-BR,pt;q=0.9,en-US;q=0.8,en;q=0.7',
                                                                    cookie: 'G_AUTHUSER_H=0; session-token=eyJhbGciOiJSUzI1NiIsImtpZCI6IjBmY2MwMTRmMjI5MzRlNDc0ODBkYWYxMDdhMzQwYzIyYmQyNjJiNmMiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJhY2NvdW50cy5nb29nbGUuY29tIiwiYXpwIjoiNzk3MDMzMzcxMzI1LWtlOWlmODZvNG8zdDE4bG5ibzlzOTZqaGJia21qbGkyLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tIiwiYXVkIjoiNzk3MDMzMzcxMzI1LWtlOWlmODZvNG8zdDE4bG5ibzlzOTZqaGJia21qbGkyLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tIiwic3ViIjoiMTEyNjc5OTA0Mzc2MjU1Mzc4MTEyIiwiZW1haWwiOiJwZWRyb3BhdWxvbGluczlAZ21haWwuY29tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImF0X2hhc2giOiJCbEFtbjFsdEJFUWRiZXpZUk5sTmZBIiwibmFtZSI6IlBlZHJvIFBhdWxvIE1lc3NpYXMgTGlucyIsInBpY3R1cmUiOiJodHRwczovL2xoMy5nb29nbGV1c2VyY29udGVudC5jb20vYS0vQU9oMTRHak9qMEJURlNBOXJzME1ESnZfRTBZT25MYll6LWVTakRBTnp5ZEdhN009czk2LWMiLCJnaXZlbl9uYW1lIjoiUGVkcm8gUGF1bG8iLCJmYW1pbHlfbmFtZSI6Ik1lc3NpYXMgTGlucyIsImxvY2FsZSI6InB0LUJSIiwiaWF0IjoxNjI4Mjc4Nzg1LCJleHAiOjE2MjgyODIzODUsImp0aSI6IjZkZDU1OWFiNWEyMmFiMTc4NTY1NTZmMzRmNmI5NWIyODllNzFiOGMifQ.xRNg_0srLVsXT3rkPMEQFZ3ACmty8qmJl1XJyLhAie9h-0f_uAC1FbORs2RzjQgQQp1HOiD_UQKzAW1tRVkjbFhp9tKlwzh9TO2EgaDLFgBAkaQfIT3iXN6rjXdgM_0oE4L6nJwkUcuHlEWJhlwhH16_cbSTmxUnmA295eYVSYX_b57_eyWvbbGGQKEirRhEy8q1NN4VPcqG50GyjMLPw4yOKOWf05k8FUekG4hQ5nbedizBm1kePa6HVe54jThNtEX79pHs6w_0VIhUPx3xYzbu96YkLmytRuNI3cUqo96ZdHqw2okQqIvRoP9b1Eh6l42V101yN_sJgl_m0rFZjw'
        },
        rawHeaders: [
            'Host',
            'localhost:5000',
            'Connection',
            'keep-alive',
            'sec-ch-ua',
            '"Chromium";v="92", " Not A;Brand";v="99", "Google Chrome";v="92"',
            'sec-ch-ua-mobile',
            '?0',
            'Upgrade-Insecure-Requests',
            '1',
            'User-Agent',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36',
            'Accept',
            'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
            'Sec-Fetch-Site',
            'same-origin',
            'Sec-Fetch-Mode',
            'navigate',
            'Sec-Fetch-User',
            '?1',
            'Sec-Fetch-Dest',
            'document',
            'Referer',
            'http://localhost:5000/rotahome',
            'Accept-Encoding',
            'gzip, deflate, br',
            'Accept-Language',
            'pt-BR,pt;q=0.9,en-US;q=0.8,en;q=0.7',
            'Cookie',
            'G_AUTHUSER_H=0; session-token=eyJhbGciOiJSUzI1NiIsImtpZCI6IjBmY2MwMTRmMjI5MzRlNDc0ODBkYWYxMDdhMzQwYzIyYmQyNjJiNmMiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJhY2NvdW50cy5nb29nbGUuY29tIiwiYXpwIjoiNzk3MDMzMzcxMzI1LWtlOWlmODZvNG8zdDE4bG5ibzlzOTZqaGJia21qbGkyLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tIiwiYXVkIjoiNzk3MDMzMzcxMzI1LWtlOWlmODZvNG8zdDE4bG5ibzlzOTZqaGJia21qbGkyLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tIiwic3ViIjoiMTEyNjc5OTA0Mzc2MjU1Mzc4MTEyIiwiZW1haWwiOiJwZWRyb3BhdWxvbGluczlAZ21haWwuY29tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImF0X2hhc2giOiJCbEFtbjFsdEJFUWRiZXpZUk5sTmZBIiwibmFtZSI6IlBlZHJvIFBhdWxvIE1lc3NpYXMgTGlucyIsInBpY3R1cmUiOiJodHRwczovL2xoMy5nb29nbGV1c2VyY29udGVudC5jb20vYS0vQU9oMTRHak9qMEJURlNBOXJzME1ESnZfRTBZT25MYll6LWVTakRBTnp5ZEdhN009czk2LWMiLCJnaXZlbl9uYW1lIjoiUGVkcm8gUGF1bG8iLCJmYW1pbHlfbmFtZSI6Ik1lc3NpYXMgTGlucyIsImxvY2FsZSI6InB0LUJSIiwiaWF0IjoxNjI4Mjc4Nzg1LCJleHAiOjE2MjgyODIzODUsImp0aSI6IjZkZDU1OWFiNWEyMmFiMTc4NTY1NTZmMzRmNmI5NWIyODllNzFiOGMifQ.xRNg_0srLVsXT3rkPMEQFZ3ACmty8qmJl1XJyLhAie9h-0f_uAC1FbORs2RzjQgQQp1HOiD_UQKzAW1tRVkjbFhp9tKlwzh9TO2EgaDLFgBAkaQfIT3iXN6rjXdgM_0oE4L6nJwkUcuHlEWJhlwhH16_cbSTmxUnmA295eYVSYX_b57_eyWvbbGGQKEirRhEy8q1NN4VPcqG50GyjMLPw4yOKOWf05k8FUekG4hQ5nbedizBm1kePa6HVe54jThNtEX79pHs6w_0VIhUPx3xYzbu96YkLmytRuNI3cUqo96ZdHqw2okQqIvRoP9b1Eh6l42V101yN_sJgl_m0rFZjw'
        ],
            trailers: { },
        rawTrailers: [],
            aborted: false,
                upgrade: false,
                    url: '/',
                        method: 'GET',
                            statusCode: null,
                                statusMessage: null,
                                    client: <ref * 1 > Socket {
            connecting: false,
                _hadError: false,
                    _parent: null,
                        _host: null,
                            _readableState: [ReadableState],
                                _events: [Object: null prototype],
                                    _eventsCount: 8,
                                        _maxListeners: undefined,
                                            _writableState: [WritableState],
                                                allowHalfOpen: true,
                                                    _sockname: null,
                                                        _pendingData: null,
                                                            _pendingEncoding: '',
                                                                server: [Server],
                                                                    _server: [Server],
                                                                        parser: [HTTPParser],
                                                                            on: [Function: socketListenerWrap],
                                                                                addListener: [Function: socketListenerWrap],
                                                                                    prependListener: [Function: socketListenerWrap],
                                                                                        _paused: false,
                                                                                            _httpMessage: [Circular * 2],
                                                                                                [Symbol(async_id_symbol)]: 9,
                                                                                                    [Symbol(kHandle)]: [TCP],
                                                                                                        [Symbol(kSetNoDelay)]: false,
                                                                                                            [Symbol(lastWriteQueueSize)]: 0,
                                                                                                                [Symbol(timeout)]: null,
                                                                                                                    [Symbol(kBuffer)]: null,
                                                                                                                        [Symbol(kBufferCb)]: null,
                                                                                                                            [Symbol(kBufferGen)]: null,
                                                                                                                                [Symbol(kCapture)]: false,
                                                                                                                                    [Symbol(kBytesRead)]: 0,
                                                                                                                                        [Symbol(kBytesWritten)]: 0
        },
        _consuming: false,
            _dumped: false,
                next: [Function: next],
                    baseUrl: '/rotaperfil',
                        originalUrl: '/rotaperfil',
                            _parsedUrl: Url {
            protocol: null,
                slashes: null,
                    auth: null,
                        host: null,
                            port: null,
                                hostname: null,
                                    hash: null,
                                        search: null,
                                            query: null,
                                                pathname: '/',
                                                    path: '/',
                                                        href: '/',
                                                            _raw: '/'
        },
        params: { },
        query: { },
        res: [Circular * 2],
            _parsedOriginalUrl: Url {
            protocol: null,
                slashes: null,
                    auth: null,
                        host: null,
                            port: null,
                                hostname: null,
                                    hash: null,
                                        search: null,
                                            query: null,
                                                pathname: '/rotaperfil',
                                                    path: '/rotaperfil',
                                                        href: '/rotaperfil',
                                                            _raw: '/rotaperfil'
        },
        body: { },
        secret: undefined,
            cookies: {
            G_AUTHUSER_H: '0',
                'session-token': 'eyJhbGciOiJSUzI1NiIsImtpZCI6IjBmY2MwMTRmMjI5MzRlNDc0ODBkYWYxMDdhMzQwYzIyYmQyNjJiNmMiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJhY2NvdW50cy5nb29nbGUuY29tIiwiYXpwIjoiNzk3MDMzMzcxMzI1LWtlOWlmODZvNG8zdDE4bG5ibzlzOTZqaGJia21qbGkyLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tIiwiYXVkIjoiNzk3MDMzMzcxMzI1LWtlOWlmODZvNG8zdDE4bG5ibzlzOTZqaGJia21qbGkyLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tIiwic3ViIjoiMTEyNjc5OTA0Mzc2MjU1Mzc4MTEyIiwiZW1haWwiOiJwZWRyb3BhdWxvbGluczlAZ21haWwuY29tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImF0X2hhc2giOiJCbEFtbjFsdEJFUWRiZXpZUk5sTmZBIiwibmFtZSI6IlBlZHJvIFBhdWxvIE1lc3NpYXMgTGlucyIsInBpY3R1cmUiOiJodHRwczovL2xoMy5nb29nbGV1c2VyY29udGVudC5jb20vYS0vQU9oMTRHak9qMEJURlNBOXJzME1ESnZfRTBZT25MYll6LWVTakRBTnp5ZEdhN009czk2LWMiLCJnaXZlbl9uYW1lIjoiUGVkcm8gUGF1bG8iLCJmYW1pbHlfbmFtZSI6Ik1lc3NpYXMgTGlucyIsImxvY2FsZSI6InB0LUJSIiwiaWF0IjoxNjI4Mjc4Nzg1LCJleHAiOjE2MjgyODIzODUsImp0aSI6IjZkZDU1OWFiNWEyMmFiMTc4NTY1NTZmMzRmNmI5NWIyODllNzFiOGMifQ.xRNg_0srLVsXT3rkPMEQFZ3ACmty8qmJl1XJyLhAie9h-0f_uAC1FbORs2RzjQgQQp1HOiD_UQKzAW1tRVkjbFhp9tKlwzh9TO2EgaDLFgBAkaQfIT3iXN6rjXdgM_0oE4L6nJwkUcuHlEWJhlwhH16_cbSTmxUnmA295eYVSYX_b57_eyWvbbGGQKEirRhEy8q1NN4VPcqG50GyjMLPw4yOKOWf05k8FUekG4hQ5nbedizBm1kePa6HVe54jThNtEX79pHs6w_0VIhUPx3xYzbu96YkLmytRuNI3cUqo96ZdHqw2okQqIvRoP9b1Eh6l42V101yN_sJgl_m0rFZjw'
        },
        signedCookies: [Object: null prototype] { },
        route: Route { path: '/', stack: [Array], methods: [Object] },
        [Symbol(kCapture)]: false
    },
    locals: [Object: null prototype] { },
    [Symbol(kCapture)]: false,
        [Symbol(kNeedDrain)]: false,
            [Symbol(corked)]: 0,
                [Symbol(kOutHeaders)]: [Object: null prototype] {
        'x-powered-by': ['X-Powered-By', 'Express']
    }
}